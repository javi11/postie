// Code generated by MockGen. DO NOT EDIT.
// Source: ../config/config.go
//
// Generated by this command:
//
//	mockgen -source=../config/config.go -destination=./config.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	nntppool "github.com/javi11/nntppool"
	config "github.com/javi11/postie/internal/config"
	gomock "go.uber.org/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
	isgomock struct{}
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetNNTPPool mocks base method.
func (m *MockConfig) GetNNTPPool() (nntppool.UsenetConnectionPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNNTPPool")
	ret0, _ := ret[0].(nntppool.UsenetConnectionPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNNTPPool indicates an expected call of GetNNTPPool.
func (mr *MockConfigMockRecorder) GetNNTPPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNNTPPool", reflect.TypeOf((*MockConfig)(nil).GetNNTPPool))
}

// GetNzbCompressionConfig mocks base method.
func (m *MockConfig) GetNzbCompressionConfig() config.NzbCompressionConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNzbCompressionConfig")
	ret0, _ := ret[0].(config.NzbCompressionConfig)
	return ret0
}

// GetNzbCompressionConfig indicates an expected call of GetNzbCompressionConfig.
func (mr *MockConfigMockRecorder) GetNzbCompressionConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNzbCompressionConfig", reflect.TypeOf((*MockConfig)(nil).GetNzbCompressionConfig))
}

// GetPar2Config mocks base method.
func (m *MockConfig) GetPar2Config(ctx context.Context) (*config.Par2Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPar2Config", ctx)
	ret0, _ := ret[0].(*config.Par2Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPar2Config indicates an expected call of GetPar2Config.
func (mr *MockConfigMockRecorder) GetPar2Config(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPar2Config", reflect.TypeOf((*MockConfig)(nil).GetPar2Config), ctx)
}

// GetPostCheckConfig mocks base method.
func (m *MockConfig) GetPostCheckConfig() config.PostCheck {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostCheckConfig")
	ret0, _ := ret[0].(config.PostCheck)
	return ret0
}

// GetPostCheckConfig indicates an expected call of GetPostCheckConfig.
func (mr *MockConfigMockRecorder) GetPostCheckConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostCheckConfig", reflect.TypeOf((*MockConfig)(nil).GetPostCheckConfig))
}

// GetPostUploadScriptConfig mocks base method.
func (m *MockConfig) GetPostUploadScriptConfig() config.PostUploadScriptConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostUploadScriptConfig")
	ret0, _ := ret[0].(config.PostUploadScriptConfig)
	return ret0
}

// GetPostUploadScriptConfig indicates an expected call of GetPostUploadScriptConfig.
func (mr *MockConfigMockRecorder) GetPostUploadScriptConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostUploadScriptConfig", reflect.TypeOf((*MockConfig)(nil).GetPostUploadScriptConfig))
}

// GetPostingConfig mocks base method.
func (m *MockConfig) GetPostingConfig() config.PostingConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostingConfig")
	ret0, _ := ret[0].(config.PostingConfig)
	return ret0
}

// GetPostingConfig indicates an expected call of GetPostingConfig.
func (mr *MockConfigMockRecorder) GetPostingConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostingConfig", reflect.TypeOf((*MockConfig)(nil).GetPostingConfig))
}

// GetQueueConfig mocks base method.
func (m *MockConfig) GetQueueConfig() config.QueueConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueConfig")
	ret0, _ := ret[0].(config.QueueConfig)
	return ret0
}

// GetQueueConfig indicates an expected call of GetQueueConfig.
func (mr *MockConfigMockRecorder) GetQueueConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueConfig", reflect.TypeOf((*MockConfig)(nil).GetQueueConfig))
}

// GetWatcherConfig mocks base method.
func (m *MockConfig) GetWatcherConfig() config.WatcherConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatcherConfig")
	ret0, _ := ret[0].(config.WatcherConfig)
	return ret0
}

// GetWatcherConfig indicates an expected call of GetWatcherConfig.
func (mr *MockConfigMockRecorder) GetWatcherConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatcherConfig", reflect.TypeOf((*MockConfig)(nil).GetWatcherConfig))
}
