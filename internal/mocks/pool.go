// Code generated by MockGen. DO NOT EDIT.
// Source: ../pool/manager.go
//
// Generated by this command:
//
//	mockgen -source=../pool/manager.go -destination=./pool.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessorPauser is a mock of ProcessorPauser interface.
type MockProcessorPauser struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorPauserMockRecorder
	isgomock struct{}
}

// MockProcessorPauserMockRecorder is the mock recorder for MockProcessorPauser.
type MockProcessorPauserMockRecorder struct {
	mock *MockProcessorPauser
}

// NewMockProcessorPauser creates a new mock instance.
func NewMockProcessorPauser(ctrl *gomock.Controller) *MockProcessorPauser {
	mock := &MockProcessorPauser{ctrl: ctrl}
	mock.recorder = &MockProcessorPauserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessorPauser) EXPECT() *MockProcessorPauserMockRecorder {
	return m.recorder
}

// IsPaused mocks base method.
func (m *MockProcessorPauser) IsPaused() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPaused")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPaused indicates an expected call of IsPaused.
func (mr *MockProcessorPauserMockRecorder) IsPaused() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPaused", reflect.TypeOf((*MockProcessorPauser)(nil).IsPaused))
}

// PauseProcessing mocks base method.
func (m *MockProcessorPauser) PauseProcessing() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PauseProcessing")
}

// PauseProcessing indicates an expected call of PauseProcessing.
func (mr *MockProcessorPauserMockRecorder) PauseProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseProcessing", reflect.TypeOf((*MockProcessorPauser)(nil).PauseProcessing))
}

// ResumeProcessing mocks base method.
func (m *MockProcessorPauser) ResumeProcessing() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResumeProcessing")
}

// ResumeProcessing indicates an expected call of ResumeProcessing.
func (mr *MockProcessorPauserMockRecorder) ResumeProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeProcessing", reflect.TypeOf((*MockProcessorPauser)(nil).ResumeProcessing))
}
