// Code generated by MockGen. DO NOT EDIT.
// Source: ../nzb/nzb.go
//
// Generated by this command:
//
//	mockgen -source=../nzb/nzb.go -destination=./nzb.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	article "github.com/javi11/postie/internal/article"
	gomock "go.uber.org/mock/gomock"
)

// MockNZBGenerator is a mock of NZBGenerator interface.
type MockNZBGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockNZBGeneratorMockRecorder
	isgomock struct{}
}

// MockNZBGeneratorMockRecorder is the mock recorder for MockNZBGenerator.
type MockNZBGeneratorMockRecorder struct {
	mock *MockNZBGenerator
}

// NewMockNZBGenerator creates a new mock instance.
func NewMockNZBGenerator(ctrl *gomock.Controller) *MockNZBGenerator {
	mock := &MockNZBGenerator{ctrl: ctrl}
	mock.recorder = &MockNZBGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNZBGenerator) EXPECT() *MockNZBGeneratorMockRecorder {
	return m.recorder
}

// AddArticle mocks base method.
func (m *MockNZBGenerator) AddArticle(arg0 *article.Article) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddArticle", arg0)
}

// AddArticle indicates an expected call of AddArticle.
func (mr *MockNZBGeneratorMockRecorder) AddArticle(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArticle", reflect.TypeOf((*MockNZBGenerator)(nil).AddArticle), arg0)
}

// AddFileHash mocks base method.
func (m *MockNZBGenerator) AddFileHash(filename, hash string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFileHash", filename, hash)
}

// AddFileHash indicates an expected call of AddFileHash.
func (mr *MockNZBGeneratorMockRecorder) AddFileHash(filename, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileHash", reflect.TypeOf((*MockNZBGenerator)(nil).AddFileHash), filename, hash)
}

// Generate mocks base method.
func (m *MockNZBGenerator) Generate(outputPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", outputPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockNZBGeneratorMockRecorder) Generate(outputPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockNZBGenerator)(nil).Generate), outputPath)
}
