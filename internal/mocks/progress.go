// Code generated by MockGen. DO NOT EDIT.
// Source: ../progress/progress.go
//
// Generated by this command:
//
//	mockgen -source=../progress/progress.go -destination=./progress.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	progress "github.com/javi11/postie/internal/progress"
	gomock "go.uber.org/mock/gomock"
)

// MockJobProgress is a mock of JobProgress interface.
type MockJobProgress struct {
	ctrl     *gomock.Controller
	recorder *MockJobProgressMockRecorder
	isgomock struct{}
}

// MockJobProgressMockRecorder is the mock recorder for MockJobProgress.
type MockJobProgressMockRecorder struct {
	mock *MockJobProgress
}

// NewMockJobProgress creates a new mock instance.
func NewMockJobProgress(ctrl *gomock.Controller) *MockJobProgress {
	mock := &MockJobProgress{ctrl: ctrl}
	mock.recorder = &MockJobProgressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobProgress) EXPECT() *MockJobProgressMockRecorder {
	return m.recorder
}

// AddProgress mocks base method.
func (m *MockJobProgress) AddProgress(id uuid.UUID, name string, pType progress.ProgressType, total int64) progress.Progress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProgress", id, name, pType, total)
	ret0, _ := ret[0].(progress.Progress)
	return ret0
}

// AddProgress indicates an expected call of AddProgress.
func (mr *MockJobProgressMockRecorder) AddProgress(id, name, pType, total any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProgress", reflect.TypeOf((*MockJobProgress)(nil).AddProgress), id, name, pType, total)
}

// Close mocks base method.
func (m *MockJobProgress) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockJobProgressMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockJobProgress)(nil).Close))
}

// FinishProgress mocks base method.
func (m *MockJobProgress) FinishProgress(id uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishProgress", id)
}

// FinishProgress indicates an expected call of FinishProgress.
func (mr *MockJobProgressMockRecorder) FinishProgress(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishProgress", reflect.TypeOf((*MockJobProgress)(nil).FinishProgress), id)
}

// GetAllProgress mocks base method.
func (m *MockJobProgress) GetAllProgress() map[uuid.UUID]progress.Progress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProgress")
	ret0, _ := ret[0].(map[uuid.UUID]progress.Progress)
	return ret0
}

// GetAllProgress indicates an expected call of GetAllProgress.
func (mr *MockJobProgressMockRecorder) GetAllProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProgress", reflect.TypeOf((*MockJobProgress)(nil).GetAllProgress))
}

// GetAllProgressState mocks base method.
func (m *MockJobProgress) GetAllProgressState() []progress.ProgressState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProgressState")
	ret0, _ := ret[0].([]progress.ProgressState)
	return ret0
}

// GetAllProgressState indicates an expected call of GetAllProgressState.
func (mr *MockJobProgressMockRecorder) GetAllProgressState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProgressState", reflect.TypeOf((*MockJobProgress)(nil).GetAllProgressState))
}

// GetJobID mocks base method.
func (m *MockJobProgress) GetJobID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetJobID indicates an expected call of GetJobID.
func (mr *MockJobProgressMockRecorder) GetJobID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobID", reflect.TypeOf((*MockJobProgress)(nil).GetJobID))
}

// GetProgress mocks base method.
func (m *MockJobProgress) GetProgress(id uuid.UUID) progress.Progress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgress", id)
	ret0, _ := ret[0].(progress.Progress)
	return ret0
}

// GetProgress indicates an expected call of GetProgress.
func (mr *MockJobProgressMockRecorder) GetProgress(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgress", reflect.TypeOf((*MockJobProgress)(nil).GetProgress), id)
}

// SetAllPaused mocks base method.
func (m *MockJobProgress) SetAllPaused(paused bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAllPaused", paused)
}

// SetAllPaused indicates an expected call of SetAllPaused.
func (mr *MockJobProgressMockRecorder) SetAllPaused(paused any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllPaused", reflect.TypeOf((*MockJobProgress)(nil).SetAllPaused), paused)
}

// MockProgress is a mock of Progress interface.
type MockProgress struct {
	ctrl     *gomock.Controller
	recorder *MockProgressMockRecorder
	isgomock struct{}
}

// MockProgressMockRecorder is the mock recorder for MockProgress.
type MockProgressMockRecorder struct {
	mock *MockProgress
}

// NewMockProgress creates a new mock instance.
func NewMockProgress(ctrl *gomock.Controller) *MockProgress {
	mock := &MockProgress{ctrl: ctrl}
	mock.recorder = &MockProgressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgress) EXPECT() *MockProgressMockRecorder {
	return m.recorder
}

// Finish mocks base method.
func (m *MockProgress) Finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish.
func (mr *MockProgressMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockProgress)(nil).Finish))
}

// GetCurrent mocks base method.
func (m *MockProgress) GetCurrent() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrent")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetCurrent indicates an expected call of GetCurrent.
func (mr *MockProgressMockRecorder) GetCurrent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrent", reflect.TypeOf((*MockProgress)(nil).GetCurrent))
}

// GetElapsedTime mocks base method.
func (m *MockProgress) GetElapsedTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElapsedTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetElapsedTime indicates an expected call of GetElapsedTime.
func (mr *MockProgressMockRecorder) GetElapsedTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElapsedTime", reflect.TypeOf((*MockProgress)(nil).GetElapsedTime))
}

// GetID mocks base method.
func (m *MockProgress) GetID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockProgressMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockProgress)(nil).GetID))
}

// GetName mocks base method.
func (m *MockProgress) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockProgressMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockProgress)(nil).GetName))
}

// GetPercentage mocks base method.
func (m *MockProgress) GetPercentage() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPercentage")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetPercentage indicates an expected call of GetPercentage.
func (mr *MockProgressMockRecorder) GetPercentage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPercentage", reflect.TypeOf((*MockProgress)(nil).GetPercentage))
}

// GetStartTime mocks base method.
func (m *MockProgress) GetStartTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetStartTime indicates an expected call of GetStartTime.
func (mr *MockProgressMockRecorder) GetStartTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartTime", reflect.TypeOf((*MockProgress)(nil).GetStartTime))
}

// GetState mocks base method.
func (m *MockProgress) GetState() progress.ProgressState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(progress.ProgressState)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockProgressMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockProgress)(nil).GetState))
}

// GetTotal mocks base method.
func (m *MockProgress) GetTotal() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotal")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTotal indicates an expected call of GetTotal.
func (mr *MockProgressMockRecorder) GetTotal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotal", reflect.TypeOf((*MockProgress)(nil).GetTotal))
}

// GetType mocks base method.
func (m *MockProgress) GetType() progress.ProgressType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(progress.ProgressType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockProgressMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockProgress)(nil).GetType))
}

// IsComplete mocks base method.
func (m *MockProgress) IsComplete() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsComplete")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsComplete indicates an expected call of IsComplete.
func (mr *MockProgressMockRecorder) IsComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsComplete", reflect.TypeOf((*MockProgress)(nil).IsComplete))
}

// IsPaused mocks base method.
func (m *MockProgress) IsPaused() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPaused")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPaused indicates an expected call of IsPaused.
func (mr *MockProgressMockRecorder) IsPaused() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPaused", reflect.TypeOf((*MockProgress)(nil).IsPaused))
}

// SetPaused mocks base method.
func (m *MockProgress) SetPaused(paused bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPaused", paused)
}

// SetPaused indicates an expected call of SetPaused.
func (mr *MockProgressMockRecorder) SetPaused(paused any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPaused", reflect.TypeOf((*MockProgress)(nil).SetPaused), paused)
}

// UpdateProgress mocks base method.
func (m *MockProgress) UpdateProgress(processed int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateProgress", processed)
}

// UpdateProgress indicates an expected call of UpdateProgress.
func (mr *MockProgressMockRecorder) UpdateProgress(processed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgress", reflect.TypeOf((*MockProgress)(nil).UpdateProgress), processed)
}
