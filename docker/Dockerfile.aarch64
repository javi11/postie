# Multi-stage build for Postie Web (ARM64)
# syntax=docker/dockerfile:1.4
FROM --platform=$BUILDPLATFORM oven/bun:1 AS frontend-builder

# Set working directory for frontend
WORKDIR /app/frontend

# Copy frontend package files first to leverage caching
COPY frontend/package.json frontend/bun.lock* ./

# Install dependencies (cache mounts removed)
RUN bun install --frozen-lockfile

# Copy frontend source and build
COPY frontend/ ./
RUN bun run build

# Backend build stage
FROM --platform=$BUILDPLATFORM golang:1.24-alpine AS backend-builder

# Install build dependencies
RUN apk add --no-cache git gcc g++ musl-dev libstdc++ sqlite-dev

# Set working directory
WORKDIR /app

# Copy go module files
COPY go.mod go.sum ./

# Download dependencies (cache mounts removed)
RUN go mod download

# Copy source code
COPY ./cmd ./cmd
COPY ./internal ./internal
COPY ./pkg ./pkg
COPY ./frontend/embed.go ./frontend/embed.go

# Copy built frontend from previous stage
COPY --from=frontend-builder /app/frontend/build ./frontend/build

# Build web binary for ARM64 (cache mounts removed)
RUN CGO_ENABLED=1 GOOS=linux GOARCH=arm64 \
    go build -trimpath -ldflags '-s -w -linkmode external -extldflags "-static"' -o postie-web cmd/web/main.go

# Use Ubuntu as a parent image
FROM --platform=$TARGETPLATFORM ghcr.io/linuxserver/baseimage-ubuntu:jammy

# Arguments for non-interactive builds
ARG DEBIAN_FRONTEND="noninteractive"
ARG BUILD_DATE
ARG VERSION

# Set up environment variables for PUID and PGID
ENV PUID=1000
ENV PGID=1000

# Set the working directory inside the container
WORKDIR /app

# Create the entrypoint script for web mode
RUN echo '#!/bin/bash\n\
    PUID=${PUID:-1000}\n\
    PGID=${PGID:-1000}\n\
    groupmod -o -g "$PGID" abc\n\
    usermod -o -u "$PUID" abc\n\
    chown -R abc:abc /app /config /watch /output\n\
    exec s6-setuidgid abc /app/postie-web\n\
    ' > /entrypoint.sh && chmod +x /entrypoint.sh

# Copy web binary from builder
COPY --from=backend-builder /app/postie-web /app/postie-web

# Create necessary directories
RUN mkdir -p /config /watch /output

# Set environment variables
ENV PORT=8080
ENV HOST=0.0.0.0

# Expose port for web interface
EXPOSE 8080

# Set volumes for configuration and nzbs
VOLUME ["/config", "/watch", "/output"]

# Default command for web mode
CMD ["/app/postie-web"]

# Set the entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# Add metadata labels
LABEL org.opencontainers.image.source="https://github.com/javi11/postie"
LABEL build_version="version: Build-date:- ${VERSION} ${BUILD_DATE}"
LABEL maintainer="javi11"