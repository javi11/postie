name: Build

on:
  push:
    tags:
      - "v*.*.*"

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/test
  build-frontend:
    runs-on: ubuntu-latest
    needs: test
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install Bun for frontend build
      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Cache frontend dependencies
      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: frontend-deps-${{ runner.os }}-${{ hashFiles('frontend/bun.lock') }}
          restore-keys: |
            frontend-deps-${{ runner.os }}-

      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: frontend
        run: bun install --frozen-lockfile

      # Extract version info for frontend
      - name: Extract version info for frontend
        id: frontend-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          COMMIT=$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT

      # Build frontend for embedding
      - name: Build frontend
        working-directory: frontend
        env:
          npm_package_version: ${{ steps.frontend-version.outputs.version }}
          GIT_COMMIT: ${{ steps.frontend-version.outputs.commit }}
        run: bun run build

      # Upload built frontend as artifact
      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 1

  build-cli:
    runs-on: ${{ matrix.runner }}
    needs: test
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
            cc: zig cc -target x86_64-linux-musl
          - goos: linux
            goarch: arm64
            runner: ubuntu-latest
            cc: zig cc -target aarch64-linux-musl
          # macOS builds
          - goos: darwin
            goarch: amd64
            runner: macos-13
            cc: ""
          - goos: darwin
            goarch: arm64
            runner: macos-13
            cc: ""
          # Windows builds
          - goos: windows
            goarch: amd64
            runner: ubuntu-latest
            cc: zig cc -target x86_64-windows-gnu
    steps:
      # dependencies
      - uses: mlugg/setup-zig@v2
        if: matrix.cc != ''

      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.5

      # checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Extract version info
      - name: Extract version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          COMMIT=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      # Build binary
      - name: Build ${{ matrix.goos }}-${{ matrix.goarch }} binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          CC: ${{ matrix.cc }}
        run: |
          # Set binary extension for Windows
          EXT=""
          if [ "${{ matrix.goos }}" = "windows" ]; then
            EXT=".exe"
          fi

          # Build the binary
          go build \
            -trimpath \
            -tags=cli \
            -ldflags="-s -w -X 'main.Version=${{ steps.version.outputs.version }}' -X 'main.GitCommit=${{ steps.version.outputs.commit }}' -X 'main.Timestamp=${{ steps.version.outputs.timestamp }}'" \
            -o "postie-cli-${{ matrix.goos }}-${{ matrix.goarch }}${EXT}" \
            ./cmd/postie/postie.go

      # Create archive
      - name: Create archive
        run: |
          # Set binary extension and archive format
          EXT=""
          ARCHIVE_EXT="tar.gz"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            EXT=".exe"
            ARCHIVE_EXT="zip"
          fi

          BINARY_NAME="postie-cli-${{ matrix.goos }}-${{ matrix.goarch }}${EXT}"
          ARCHIVE_NAME="postie-cli_v${{ steps.version.outputs.version }}_${{ matrix.goos }}_${{ matrix.goarch }}"

          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${ARCHIVE_NAME}.zip" "$BINARY_NAME"
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" "$BINARY_NAME"
          fi

      # Upload individual build artifacts
      - name: Upload ${{ matrix.goos }}-${{ matrix.goarch }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            postie-cli_v${{ steps.version.outputs.version }}_${{ matrix.goos }}_${{ matrix.goarch }}.*
          retention-days: 1

  create-universal-darwin:
    runs-on: macos-13
    needs: build-cli
    permissions:
      contents: write
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Extract version info
      - name: Extract version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Download darwin binaries
      - name: Download darwin-amd64 binary
        uses: actions/download-artifact@v4
        with:
          name: cli-darwin-amd64
          path: ./artifacts/

      - name: Download darwin-arm64 binary
        uses: actions/download-artifact@v4
        with:
          name: cli-darwin-arm64
          path: ./artifacts/

      # Extract binaries from archives
      - name: Extract binaries
        run: |
          cd artifacts
          tar -xzf postie-cli_v${{ steps.version.outputs.version }}_darwin_amd64.tar.gz
          tar -xzf postie-cli_v${{ steps.version.outputs.version }}_darwin_arm64.tar.gz

      # Create universal binary
      - name: Create universal binary
        run: |
          lipo -create \
            artifacts/postie-cli-darwin-amd64 \
            artifacts/postie-cli-darwin-arm64 \
            -output postie-cli-darwin-universal

          # Create universal archive
          tar -czf "postie-cli_v${{ steps.version.outputs.version }}_darwin_universal.tar.gz" postie-cli-darwin-universal

      # Upload universal binary
      - name: Upload universal darwin artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-darwin-universal
          path: postie-cli_v${{ steps.version.outputs.version }}_darwin_universal.tar.gz
          retention-days: 1

  create-cli-release:
    runs-on: ubuntu-latest
    needs: [build-cli, create-universal-darwin]
    permissions:
      contents: write
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Extract version info
      - name: Extract version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Download all artifacts
      - name: Download all CLI artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cli-*
          path: ./artifacts/
          merge-multiple: true

      # Create checksums
      - name: Create checksums
        run: |
          cd artifacts
          sha512sum postie-cli_v${{ steps.version.outputs.version }}_*.* > checksums-cli.txt
          cat checksums-cli.txt

      # Create GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/postie-cli_v${{ steps.version.outputs.version }}_*.*
            artifacts/checksums-cli.txt
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-web-linux:
    runs-on: ubuntu-latest
    needs: [test, build-frontend]
    permissions:
      contents: write
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.5

      # checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download frontend build
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      # Extract version info
      - name: Extract version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          COMMIT=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      # Build Linux web interface for multiple architectures
      - name: Build Linux Web Interface (amd64)
        run: |
          mkdir -p build
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
            -trimpath \
            -a \
            -ldflags '-linkmode external -extldflags "-static" -s -w -X "main.Version=${{ steps.version.outputs.version }}" -X "main.GitCommit=${{ steps.version.outputs.commit }}" -X "main.Timestamp=${{ steps.version.outputs.timestamp }}"' \
            -o build/postie-web-linux-amd64 \
            cmd/web/main.go
        env:
          CC: gcc

      # Create archives
      - name: Create Linux Web Interface archives
        run: |
          mkdir -p dist
          tar -czf dist/postie-web-linux-amd64.tar.gz -C build postie-web-linux-amd64

      # Upload Linux Web Interface artifacts
      - name: Upload Linux Web Interface artifacts
        uses: actions/upload-artifact@v4
        with:
          name: postie-web-linux
          path: dist/

  build-gui-windows:
    runs-on: windows-latest
    needs: test
    permissions:
      contents: write
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.5
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      # checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install Wails (version from wails.json)
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # Install Bun
      - name: Install Bun
        run: npm install -g bun

      # Build Windows GUI using Wails config
      - name: Build Windows GUI
        run: wails build -platform windows/amd64 -ldflags="-extldflags=-static"
        env:
          CGO_ENABLED: 1

      # Upload Windows artifact
      - name: Upload Windows GUI artifact
        uses: actions/upload-artifact@v4
        with:
          name: postie-gui-windows-amd64
          path: build/bin

  build-gui-macos:
    runs-on: macos-13
    needs: test
    permissions:
      contents: write
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.5
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      # checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install Wails (version from wails.json)
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # Install Bun
      - name: Install Bun
        run: npm install -g bun

      # Build macOS GUI using Wails config (Universal Binary)
      - name: Build macOS GUI
        run: wails build -platform darwin/universal
        env:
          CGO_ENABLED: 1

      # Upload macOS artifact
      - name: Upload macOS GUI artifact
        uses: actions/upload-artifact@v4
        with:
          name: postie-gui-macos-universal
          path: build/bin

  build-image-amd64:
    runs-on: ubuntu-latest
    needs: [test, build-frontend]
    permissions:
      contents: write
      packages: write
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download frontend build
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # docker login
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for tags and labels
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,suffix=-amd64-temp
            type=semver,pattern={{version}},suffix=-amd64-temp

      # build and push amd64 image
      - name: Build and push AMD64 image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.ci
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64
          provenance: false
          sbom: false

  build-image-arm64:
    runs-on: ubuntu-latest
    needs: [test, build-frontend]
    permissions:
      contents: write
      packages: write
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download frontend build
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # docker login
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for tags and labels
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,suffix=-arm64-temp
            type=semver,pattern={{version}},suffix=-arm64-temp

      # build and push arm64 image
      - name: Build and push ARM64 image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.ci
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64
          provenance: false
          sbom: false

  create-manifest:
    runs-on: ubuntu-latest
    needs: [build-image-amd64, build-image-arm64]
    permissions:
      contents: write
      packages: write
    steps:
      # checkout for version extraction
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # docker login
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract version from tag
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT

      # Create and push multi-platform manifests using temporary tags
      - name: Create multi-platform manifest
        run: |
          # Use temporary tagged images instead of digests
          AMD64_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.version }}-amd64-temp"
          ARM64_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.version }}-arm64-temp"

          echo "AMD64 Image: $AMD64_IMAGE"
          echo "ARM64 Image: $ARM64_IMAGE"

          # Create and push version-specific manifest (v1.2.3)
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.version }} \
            $AMD64_IMAGE \
            $ARM64_IMAGE
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.version }}

          # Create and push semver version manifest (1.2.3)
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
            $AMD64_IMAGE \
            $ARM64_IMAGE
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}

          # Create and push major version manifest (v1)
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.major }} \
            $AMD64_IMAGE \
            $ARM64_IMAGE
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.major }}

          # Create and push major version manifest (1)
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major }} \
            $AMD64_IMAGE \
            $ARM64_IMAGE
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major }}

          # Create and push major.minor version manifest (v1.2)
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }} \
            $AMD64_IMAGE \
            $ARM64_IMAGE
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}

          # Create and push major.minor version manifest (1.2)
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }} \
            $AMD64_IMAGE \
            $ARM64_IMAGE
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}

          # Create and push latest manifest (multi-arch)
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            $AMD64_IMAGE \
            $ARM64_IMAGE
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # Clean up temporary tags
      - name: Clean up temporary tags
        run: |
          # Delete temporary platform-specific tags
          docker manifest rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.version }}-amd64-temp || true
          docker manifest rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.version }}-arm64-temp || true

  release-gui:
    runs-on: ubuntu-latest
    needs:
      [build-gui-windows, build-gui-macos, build-web-linux, create-cli-release]
    permissions:
      contents: write
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download Windows GUI artifact
      - name: Download Windows GUI artifact
        uses: actions/download-artifact@v4
        with:
          name: postie-gui-windows-amd64
          path: ./windows-gui

      # Download macOS GUI artifact
      - name: Download macOS GUI artifact
        uses: actions/download-artifact@v4
        with:
          name: postie-gui-macos-universal
          path: ./macos-gui

      # Ensure macOS app binaries are executable before zipping
      - name: Fix macOS app permissions
        run: |
          set -euo pipefail
          # Make any binary inside *.app/Contents/MacOS executable
          find macos-gui -path "*/Contents/MacOS/*" -type f -print0 | xargs -0 chmod +x || true
          # Show resulting permissions for debugging
          find macos-gui -path "*/Contents/MacOS/*" -type f -exec ls -l {} \; || true

      # Download Linux Web Interface artifact
      - name: Download Linux Web Interface artifact
        uses: actions/download-artifact@v4
        with:
          name: postie-web-linux
          path: ./linux-web

      # Create ZIP archives for GUI artifacts
      - name: Create Windows GUI archive
        run: |
          cd windows-gui
          zip -r ../postie-gui-windows-amd64.zip .

      - name: Create macOS GUI archive
        run: |
          cd macos-gui
          zip -r ../postie-gui-macos-universal.zip .

      # Upload GUI artifacts to release
      - name: Upload GUI artifacts to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            postie-gui-windows-amd64.zip
            postie-gui-macos-universal.zip
            linux-web/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
